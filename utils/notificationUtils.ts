import notifee from '@notifee/react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Platform } from 'react-native';

/**
 * Ki·ªÉm tra tr·∫°ng th√°i notification v√† permission
 */
export const checkNotificationStatus = async (): Promise<{
  hasPermission: boolean;
  channels: any[];
  mockShown: boolean;
}> => {
  try {
    // Ki·ªÉm tra permission (s·ª≠ d·ª•ng c√°ch kh√°c)
    let hasPermission = false;
    try {
      // Th·ª≠ t·∫°o m·ªôt notification test ƒë·ªÉ ki·ªÉm tra permission
      await notifee.displayNotification({
        id: 'test_permission',
        title: 'Test Permission',
        body: 'Testing permission...',
        android: { channelId: 'default' }
      });
      hasPermission = true;
      // X√≥a notification test ngay l·∫≠p t·ª©c
      await notifee.cancelNotification('test_permission');
    } catch (error) {
      hasPermission = false;
    }
    
    console.log('üîî Notification permission:', hasPermission);
    
    // L·∫•y danh s√°ch channels (Android)
    const channels = Platform.OS === 'android' ? await notifee.getChannels() : [];
    console.log('üîî Notification channels:', channels);
    
    // Ki·ªÉm tra tr·∫°ng th√°i mock notification
    const mockShown = await isMockNotificationShown();
    console.log('üîî Mock notification shown:', mockShown);
    
    return {
      hasPermission,
      channels,
      mockShown
    };
  } catch (error) {
    console.log('üî¥ L·ªói ki·ªÉm tra tr·∫°ng th√°i notification:', error);
    return {
      hasPermission: false,
      channels: [],
      mockShown: false
    };
  }
};

/**
 * Reset th√¥ng b√°o mock ƒë·ªÉ c√≥ th·ªÉ hi·ªÉn th·ªã l·∫°i
 */
export const resetMockNotification = async (): Promise<void> => {
  try {
    await AsyncStorage.removeItem('mock_notification_shown');
    console.log('üîÑ ƒê√£ reset th√¥ng b√°o mock');
  } catch (error) {
    console.log('üî¥ L·ªói reset th√¥ng b√°o mock:', error);
  }
};

/**
 * Ki·ªÉm tra xem th√¥ng b√°o mock ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã ch∆∞a
 */
export const isMockNotificationShown = async (): Promise<boolean> => {
  try {
    const mockNotificationShown = await AsyncStorage.getItem('mock_notification_shown');
    return mockNotificationShown === 'true';
  } catch (error) {
    console.log('üî¥ L·ªói ki·ªÉm tra th√¥ng b√°o mock:', error);
    return false;
  }
};

/**
 * ƒê√°nh d·∫•u th√¥ng b√°o mock ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã
 */
export const markMockNotificationAsShown = async (): Promise<void> => {
  try {
    await AsyncStorage.setItem('mock_notification_shown', 'true');
    console.log('‚úÖ ƒê√£ ƒë√°nh d·∫•u th√¥ng b√°o mock ƒë√£ hi·ªÉn th·ªã');
  } catch (error) {
    console.log('üî¥ L·ªói ƒë√°nh d·∫•u th√¥ng b√°o mock:', error);
  }
};

/**
 * Test hi·ªÉn th·ªã th√¥ng b√°o ngay l·∫≠p t·ª©c
 */
export const testNotificationImmediately = async (): Promise<void> => {
  try {
    console.log('üîî Test notification: B·∫Øt ƒë·∫ßu hi·ªÉn th·ªã th√¥ng b√°o test...');
    
    const notificationId = await notifee.displayNotification({
      id: 'test_notification',
      title: 'üß™ Test Notification',
      body: 'ƒê√¢y l√† th√¥ng b√°o test ƒë·ªÉ ki·ªÉm tra h·ªá th·ªëng notification!',
      android: {
        channelId: 'default',
        pressAction: {
          id: 'default',
        },
        smallIcon: 'ic_launcher',
        color: '#ff6b6b',
        // C·∫•u h√¨nh ƒë·ªÉ hi·ªÉn th·ªã popup ngay c·∫£ khi app ƒëang foreground
        importance: 4, // HIGH importance
        showTimestamp: true,
        timestamp: Date.now(),
        sound: 'default',
        vibrationPattern: [300, 500],
        actions: [
          {
            title: 'OK',
            pressAction: {
              id: 'ok',
            },
          },
        ],
      },
      ios: {
        foregroundPresentationOptions: {
          badge: true,
          sound: true,
          banner: true,
          list: true,
        },
        interruptionLevel: 'active',
      }
    });
    
    console.log('üîî Test notification: ƒê√£ hi·ªÉn th·ªã th√†nh c√¥ng v·ªõi ID:', notificationId);
  } catch (error) {
    console.log('üî¥ L·ªói test notification:', error);
    throw error;
  }
};

/**
 * Test hi·ªÉn th·ªã th√¥ng b√°o khi app ƒëang background
 */
export const testBackgroundNotification = async (): Promise<void> => {
  try {
    console.log('üîî Background notification: B·∫Øt ƒë·∫ßu delay 10 gi√¢y...');
    
    // Delay 10 gi√¢y tr∆∞·ªõc khi hi·ªÉn th·ªã notification
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    console.log('üîî Background notification: Hi·ªÉn th·ªã th√¥ng b√°o sau 10 gi√¢y...');
    
    const notificationId = await notifee.displayNotification({
      id: 'background_notification',
      title: 'üåô Background Notification (10s)',
      body: 'Th√¥ng b√°o n√†y hi·ªÉn th·ªã sau 10 gi√¢y! H√£y minimize app ƒë·ªÉ th·∫•y popup.',
      android: {
        channelId: 'default',
        pressAction: {
          id: 'default',
        },
        smallIcon: 'ic_launcher',
        color: '#9c27b0',
        importance: 4,
        showTimestamp: true,
        timestamp: Date.now(),
        sound: 'default',
        vibrationPattern: [300, 500, 300, 500],
        actions: [
          {
            title: 'M·ªü App',
            pressAction: {
              id: 'open_app',
            },
          },
          {
            title: 'ƒê√≥ng',
            pressAction: {
              id: 'dismiss',
            },
          },
        ],
      },
      ios: {
        foregroundPresentationOptions: {
          badge: true,
          sound: true,
          banner: true,
          list: true,
        },
        interruptionLevel: 'active',
      }
    });
    
    console.log('üîî Background notification: ƒê√£ hi·ªÉn th·ªã th√†nh c√¥ng v·ªõi ID:', notificationId);
  } catch (error) {
    console.log('üî¥ L·ªói background notification:', error);
    throw error;
  }
};

/**
 * Test hi·ªÉn th·ªã th√¥ng b√°o khi app ƒëang background (th·ª±c s·ª±)
 */
export const testRealBackgroundNotification = async (): Promise<void> => {
  try {
    console.log('üîî Real background notification: B·∫Øt ƒë·∫ßu delay 10 gi√¢y...');
    
    // Delay 10 gi√¢y tr∆∞·ªõc khi hi·ªÉn th·ªã notification
    // Trong th·ªùi gian n√†y, user n√™n minimize app
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    console.log('üîî Real background notification: Hi·ªÉn th·ªã th√¥ng b√°o sau 10 gi√¢y...');
    
    const notificationId = await notifee.displayNotification({
      id: 'real_background_notification',
      title: 'üì± Real Background Test',
      body: 'Th√¥ng b√°o n√†y hi·ªÉn th·ªã khi app ƒëang ch·∫°y n·ªÅn! N·∫øu b·∫°n th·∫•y popup n√†y, test th√†nh c√¥ng!',
      android: {
        channelId: 'default',
        pressAction: {
          id: 'default',
        },
        smallIcon: 'ic_launcher',
        color: '#ff5722',
        importance: 4,
        showTimestamp: true,
        timestamp: Date.now(),
        sound: 'default',
        vibrationPattern: [300, 500, 300, 500, 300, 500],
        actions: [
          {
            title: 'M·ªü App',
            pressAction: {
              id: 'open_app',
            },
          },
          {
            title: 'Test OK',
            pressAction: {
              id: 'test_ok',
            },
          },
        ],
      },
      ios: {
        foregroundPresentationOptions: {
          badge: true,
          sound: true,
          banner: true,
          list: true,
        },
        interruptionLevel: 'active',
      }
    });
    
    console.log('üîî Real background notification: ƒê√£ hi·ªÉn th·ªã th√†nh c√¥ng v·ªõi ID:', notificationId);
  } catch (error) {
    console.log('üî¥ L·ªói real background notification:', error);
    throw error;
  }
};

/**
 * Test hi·ªÉn th·ªã th√¥ng b√°o khi app ƒëang background v·ªõi ƒë·∫øm ng∆∞·ª£c
 */
export const testBackgroundNotificationWithCountdown = async (onCountdown?: (seconds: number) => void): Promise<void> => {
  try {
    console.log('üîî Background notification: B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c 10 gi√¢y...');
    
    // ƒê·∫øm ng∆∞·ª£c t·ª´ 10 ƒë·∫øn 1
    for (let i = 10; i > 0; i--) {
      console.log(`üîî Background notification: C√≤n ${i} gi√¢y...`);
      if (onCountdown) {
        onCountdown(i);
      }
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log('üîî Background notification: Hi·ªÉn th·ªã th√¥ng b√°o!');
    
    const notificationId = await notifee.displayNotification({
      id: 'background_notification_countdown',
      title: '‚è∞ Background Notification (10s)',
      body: 'Th√¥ng b√°o n√†y hi·ªÉn th·ªã sau 10 gi√¢y ƒë·∫øm ng∆∞·ª£c!',
      android: {
        channelId: 'default',
        pressAction: {
          id: 'default',
        },
        smallIcon: 'ic_launcher',
        color: '#ff5722',
        importance: 4,
        showTimestamp: true,
        timestamp: Date.now(),
        sound: 'default',
        vibrationPattern: [300, 500, 300, 500, 300, 500],
        actions: [
          {
            title: 'M·ªü App',
            pressAction: {
              id: 'open_app',
            },
          },
          {
            title: 'ƒê√≥ng',
            pressAction: {
              id: 'dismiss',
            },
          },
        ],
      },
      ios: {
        foregroundPresentationOptions: {
          badge: true,
          sound: true,
          banner: true,
          list: true,
        },
        interruptionLevel: 'active',
      }
    });
    
    console.log('üîî Background notification: ƒê√£ hi·ªÉn th·ªã th√†nh c√¥ng v·ªõi ID:', notificationId);
  } catch (error) {
    console.log('üî¥ L·ªói background notification:', error);
    throw error;
  }
}; 